// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Получает access и refresh-токены, используя аутентификацию по логину и паролю",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Получение токенов",
                "parameters": [
                    {
                        "description": "Логин и пароль",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpserver.loginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное получение токенов",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат входных данных",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    },
                    "403": {
                        "description": "Неверный пароль",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь с запрашиваемым email не найден",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    },
                    "500": {
                        "description": "Проблемы на стороне сервера",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Удаляет пару токенов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Выход из аккаунта",
                "parameters": [
                    {
                        "description": "Пара токенов",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpserver.logoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный выход из аккаунта",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат входных данных",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    },
                    "500": {
                        "description": "Проблемы на стороне сервера",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    }
                }
            }
        },
        "/refresh": {
            "post": {
                "description": "Обновляет access и refresh-токены, старая пара становится непригодной",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Обновление токенов",
                "parameters": [
                    {
                        "description": "Пара токенов",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpserver.refreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное обновление токенов",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат входных данных",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    },
                    "404": {
                        "description": "Пара токенов не найдена (refresh-токен истёк)",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    },
                    "500": {
                        "description": "Проблемы на стороне сервера",
                        "schema": {
                            "$ref": "#/definitions/httpserver.tokensResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httpserver.loginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "httpserver.logoutRequest": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                }
            }
        },
        "httpserver.refreshRequest": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                }
            }
        },
        "httpserver.tokensData": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                }
            }
        },
        "httpserver.tokensResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/httpserver.tokensData"
                },
                "error": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8092",
	BasePath:         "/api/v1/auth",
	Schemes:          []string{},
	Title:            "BRM API",
	Description:      "Swagger документация к API авторизации",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
