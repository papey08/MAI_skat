from gensim.utils import simple_preprocess
from gensim.models import Word2Vec
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier
from sklearn.tree import DecisionTreeClassifier

import joblib

# Исходные данные
texts = [
    # Претензия
    "Введение в заблуждение. Не закрывают счёт",
    "заморозили средства",
    "Занимаются обманом людей",
    "Пришла блокировка",
    "Подключили подписку без моего согласия",
    "вывод средств с заблокированной карты",
    "Некорректное зачисление кешбека по акции '35% на всё самое важное' ",
    "Посылка пришла в повреждённой упаковке!",
    "Вы отправили не тот товар, который я заказывал!",
    "Почему до сих пор нет моего заказа?",
    "Почти месяц не могут оформить карту",
    "Карту дали. Пользоваться не дали.",
    "Не работает интернет-банк и кешбэк не начисляется",
    "Служба поддержки не отвечает на мои вопросы!",
    "Оплата не прошла, а деньги списались!",
    "Пропала карта с деньгами из личного кабинет",
    "Оформление кредитной карты",
    "Банк не активирует карту",
    "Полное пренебрежение клиентом",
    "У меня украли всю пенсию с карты мир, но сотрудники банка отказываются помогать",
    "Необходима проверка сотрудников организации",
    "Банкомат взял деньги и не перевёл на счёт",
    "Банкомат снял деньги со счета и не выдал",
    "Это уже похоже на какой-то анекдот или на сценку из юмористической программы",
    "После получения карты, банк не активирует карту",
    "Не могут выдать дебетовую карту по оставленной ранее заявке",
    "Народный вклад+",
    "Банк арестовывает сумму свыше постановления",
    "Банк не выплачивает обещанный кэшбэк по акции",
    "Ужасный банк! Чтобы забрать свои собственные деньги, им еще надо заплатить!",
    "Служба доставки банка худшая из всех",
    "Не удалось получить карту банка для открытия вклада",
    "Осторожно, обманщики!",
    "Не ведитесь на обещание кешбека! А лучше вообще не связывайтесь...",
    "Выпуск карты на сайте с доставкой курьером",
    "Выплачивают проценты только в рабочие дни! Отвратительный сервис",
    "Комиссия по закрытой карте и карточному счету + игнорирование претензии и диалога в чате интернет-банка",
    "Обман и фиктивная доставка: как Промсвязьбанк не может выдать простую дебетовую карту",
    "Исчезли деньги с карты",
    "Банкомат забрал деньги и не зачислил на карту, от банка 3 недели отговорок и вранья",
    "Самый ужасный банк",
    "ЭСП, не являющееся корпоративным",
    "Не доставили карту",
      

    # Благодарность
    "БЛАГОДАРСТВЕННОЕ ПИСЬМО",
    "Спасли от непредвиденных трат)",
    "Помогли оформить Альфа карту с любимым кэш беком",
    "Прекрасное,быстрое обслуживание)",
    "Очень-очень удобно спасибо",
    "Благодарность",
    "Оперативная помощь",
    "Самый безопасный банк",
    "Специалист помогла решить все вопросы",
    "Быстрая и понятная помощь в решении проблемы",
    "Вернули комиссию",
    "Оперативное решение вопроса, выгодные условия сотрудничества",
    "Консультации очень понятные и доходчивые",
    "Поддержка Альфа-Банка",
    "Помощь в закрытии раздвоения номера",
    "Банк просто супер",
    "Лучший банк",
    "Быстрая поддержка и высокий кэшбэк",
    "Очень хороший банк, я из Индии, я студент в Nalchik в Kbsu, они предоставляют лучший сервис.",
    "Оперативное обслуживание",
    "Низкая ставка рефинансирования",
    "Вежливость",
    "Помощь с акцией",
    "Возврат денежных средств оперативно",
    "Помощь в оформлении ОСАГО",
    "Про переводы через банкомат по СБП сообщили",
    "Подсказали про открытие вклада через сотрудника в офисе",
    "Приняли положительное решение о выплате по претензии",
    "Быстро помогли в официальном сообществе со счетами.",
    "Оформление дополнительных детских карт - исчерпывающий ответ ИИ в чате",
    "Благодарность отделению",
    "Подробная консультация по кредиту",
    "Помогли сделать оплату ДО 'Лиховидский'",
    "Отличное отделение ДО 'Лиховидский'",
    "Отличная работа ДО 'Лиховидский'",
    "Благодарность офису 'Донецк-50'",
    "Положительный отзыв",
    "Быстрая консультация по вкладам ПСБ",
    "Вклад",
    "Быстрая и качественная работа",
    "Хочу оставить благодарность",
    "Спасибо за качественное обслуживание",
    "Открытие вклада ,положительный отзыв",
    


    # Предложение
    "Можно добавить новые цвета в ассортимент?",
    "Почему бы не расширить каталог товаров?",
    "Предлагаю добавить возможность оплаты через PayPal!",
    "Было бы здорово, если бы доставка стала бесплатной!",
    "Пожалуйста, добавьте больше информации о товаре на сайте.",
    "Предложение: сделайте больше акций на популярные товары.",
    "Можно ли увеличить количество пунктов самовывоза?",
    "Хотелось бы видеть приложение для вашего сервиса.",
    "Планируете ли вы расширить ассортимент сезонных товаров?",
    "Добавьте отзывы клиентов на каждую карточку товара.",
    "Пожелание от пенсионера"
]

categories = ["Претензия", "Благодарность", "Предложение"]
labels = [0] * 43 + [1] * 43 + [2] * 11  # Метки для первой модели


print(f"Количество текстов: {len(texts)}")
print(f"Количество меток: {len(labels)}")

# Токенизация текстов
tokenized_texts = [simple_preprocess(text) for text in texts]

# Обучение модели Word2Vec
word2vec_model = Word2Vec(
    sentences=tokenized_texts,
    vector_size=100,
    window=5,
    min_count=1,
    workers=4
)

# Функция преобразования текста в вектор
def get_text_vector(text, model):
    vectors = [
        model.wv[word] for word in text if word in model.wv
    ]
    if len(vectors) == 0:
        return np.zeros(model.vector_size)
    return np.mean(vectors, axis=0)

# Преобразование текстов в векторы
text_vectors = np.array([get_text_vector(text, word2vec_model) for text in tokenized_texts])

# Разделение данных на обучение и тест
X_train, X_test, y_train, y_test = train_test_split(text_vectors, labels, test_size=0.2, random_state=42)

# Первая модель
classifier = LogisticRegression()
classifier.fit(X_train, y_train)

# Вторая модель
classifier2 = model = DecisionTreeClassifier()
classifier2.fit(X_train, y_train)

# Третья модель
classifier3 = MLPClassifier(
  hidden_layer_sizes=(6,), 
  max_iter=2000, alpha=1e-4,
  solver='sgd', random_state=2)

classifier3.fit(X_train, y_train)

# Проверка: новый отзыв
new_review = "Хотелось бы больше кэшбека"
tokenized_review = simple_preprocess(new_review)
review_vector = get_text_vector(tokenized_review, word2vec_model)

# Первая модель
predicted_category = classifier.predict([review_vector])[0]
print(f"Категория: {categories[predicted_category]}")

# Вторая модель
predicted_category = classifier2.predict([review_vector])[0]
print(f"Категория: {categories[predicted_category]}")

# Третья модель
predicted_category = classifier3.predict([review_vector])[0]
print(f"Категория: {categories[predicted_category]}")

joblib.dump(classifier2, 'classifier.pkl')
print("Модель сохранена в файл classifier.pkl")

joblib.dump(word2vec_model, 'word2vec_model.pkl')
print("Модель сохранена в файл classifier.pkl")
